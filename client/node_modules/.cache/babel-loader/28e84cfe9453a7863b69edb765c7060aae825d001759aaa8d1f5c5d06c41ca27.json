{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Get auth token from localStorage\n  getAuthToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Set auth token to localStorage\n  setAuthToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  // Remove auth token from localStorage\n  removeAuthToken() {\n    localStorage.removeItem('token');\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const token = this.getAuthToken();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n\n  // POST request\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // PUT request\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    const response = await this.post('/auth/login', credentials);\n    if (response.token) {\n      this.setAuthToken(response.token);\n    }\n    return response;\n  }\n  async register(userData) {\n    const response = await this.post('/auth/register', userData);\n    if (response.token) {\n      this.setAuthToken(response.token);\n    }\n    return response;\n  }\n  async logout() {\n    this.removeAuthToken();\n    return {\n      success: true\n    };\n  }\n\n  // Dashboard endpoints\n  async getDashboard() {\n    return this.get('/dashboard');\n  }\n  async getUserStats() {\n    return this.get('/dashboard/stats');\n  }\n\n  // User endpoints\n  async getCurrentUser() {\n    return this.get('/users/me');\n  }\n  async updateProfile(userData) {\n    return this.put('/users/profile', userData);\n  }\n\n  // Event endpoints\n  async getEvents() {\n    return this.get('/events');\n  }\n  async getEvent(id) {\n    return this.get(`/events/${id}`);\n  }\n  async registerForEvent(eventId) {\n    return this.post(`/events/${eventId}/register`);\n  }\n\n  // Blog endpoints\n  async getBlogs() {\n    return this.get('/blogs');\n  }\n  async getBlog(id) {\n    return this.get(`/blogs/${id}`);\n  }\n\n  // Contest endpoints\n  async getContests() {\n    return this.get('/contests');\n  }\n  async getContest(id) {\n    return this.get(`/contests/${id}`);\n  }\n  async submitContestEntry(contestId, entryData) {\n    return this.post(`/contests/${contestId}/submit`, entryData);\n  }\n\n  // AI endpoints\n  async generateContent(prompt) {\n    return this.post('/ai/generate', {\n      prompt\n    });\n  }\n\n  // Payment endpoints\n  async createPayment(paymentData) {\n    return this.post('/payments/create', paymentData);\n  }\n  async getPaymentHistory() {\n    return this.get('/payments/history');\n  }\n\n  // Admin endpoints\n  async getAdminStats() {\n    return this.get('/admin/stats');\n  }\n  async getUsers() {\n    return this.get('/admin/users');\n  }\n  async updateUserRole(userId, role) {\n    return this.put(`/admin/users/${userId}/role`, {\n      role\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create a singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","request","endpoint","options","url","config","headers","Authorization","response","fetch","ok","errorData","json","catch","Error","error","status","console","get","method","post","data","body","JSON","stringify","put","delete","login","credentials","register","userData","logout","success","getDashboard","getUserStats","getCurrentUser","updateProfile","getEvents","getEvent","id","registerForEvent","eventId","getBlogs","getBlog","getContests","getContest","submitContestEntry","contestId","entryData","generateContent","prompt","createPayment","paymentData","getPaymentHistory","getAdminStats","getUsers","updateUserRole","userId","role","healthCheck","apiService"],"sources":["/Users/priskenlo/web_PersonaCentric/client/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Get auth token from localStorage\n  getAuthToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Set auth token to localStorage\n  setAuthToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  // Remove auth token from localStorage\n  removeAuthToken() {\n    localStorage.removeItem('token');\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const token = this.getAuthToken();\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, { method: 'GET' });\n  }\n\n  // POST request\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // PUT request\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, { method: 'DELETE' });\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    const response = await this.post('/auth/login', credentials);\n    if (response.token) {\n      this.setAuthToken(response.token);\n    }\n    return response;\n  }\n\n  async register(userData) {\n    const response = await this.post('/auth/register', userData);\n    if (response.token) {\n      this.setAuthToken(response.token);\n    }\n    return response;\n  }\n\n  async logout() {\n    this.removeAuthToken();\n    return { success: true };\n  }\n\n  // Dashboard endpoints\n  async getDashboard() {\n    return this.get('/dashboard');\n  }\n\n  async getUserStats() {\n    return this.get('/dashboard/stats');\n  }\n\n  // User endpoints\n  async getCurrentUser() {\n    return this.get('/users/me');\n  }\n\n  async updateProfile(userData) {\n    return this.put('/users/profile', userData);\n  }\n\n  // Event endpoints\n  async getEvents() {\n    return this.get('/events');\n  }\n\n  async getEvent(id) {\n    return this.get(`/events/${id}`);\n  }\n\n  async registerForEvent(eventId) {\n    return this.post(`/events/${eventId}/register`);\n  }\n\n  // Blog endpoints\n  async getBlogs() {\n    return this.get('/blogs');\n  }\n\n  async getBlog(id) {\n    return this.get(`/blogs/${id}`);\n  }\n\n  // Contest endpoints\n  async getContests() {\n    return this.get('/contests');\n  }\n\n  async getContest(id) {\n    return this.get(`/contests/${id}`);\n  }\n\n  async submitContestEntry(contestId, entryData) {\n    return this.post(`/contests/${contestId}/submit`, entryData);\n  }\n\n  // AI endpoints\n  async generateContent(prompt) {\n    return this.post('/ai/generate', { prompt });\n  }\n\n  // Payment endpoints\n  async createPayment(paymentData) {\n    return this.post('/payments/create', paymentData);\n  }\n\n  async getPaymentHistory() {\n    return this.get('/payments/history');\n  }\n\n  // Admin endpoints\n  async getAdminStats() {\n    return this.get('/admin/stats');\n  }\n\n  async getUsers() {\n    return this.get('/admin/users');\n  }\n\n  async updateUserRole(userId, role) {\n    return this.put(`/admin/users/${userId}/role`, { role });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create a singleton instance\nconst apiService = new ApiService();\n\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}